!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mow/mowtodo/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
AddTask	pkg/todo/todo.go	/^func (t *Todo) AddTask(task string, priority string, dueDate string) {$/;"	f	struct:todo.Todo
Description	pkg/todo/todo.go	/^	Description string$/;"	m	struct:todo.Task	typeref:typename:string
DueDate	pkg/todo/todo.go	/^	DueDate     string$/;"	m	struct:todo.Task	typeref:typename:string
Error	pkg/pprint/pprint.go	/^func Error(msg string) {$/;"	f	package:pprint
Init	pkg/todo/todo.go	/^func Init() *Todo {$/;"	f	package:todo	typeref:typename:*Todo
IsDone	pkg/todo/todo.go	/^	IsDone      bool$/;"	m	struct:todo.Task	typeref:typename:bool
ListDone	pkg/todo/todo.go	/^	ListDone     bool$/;"	m	struct:todo.Todo	typeref:typename:bool
ListUndone	pkg/todo/todo.go	/^	ListUndone   bool$/;"	m	struct:todo.Todo	typeref:typename:bool
Open	pkg/file/file.go	/^func Open(filePath string) *os.File {$/;"	f	package:file	typeref:typename:*os.File
OpenEditor	pkg/todo/todo.go	/^func (t *Todo) OpenEditor() {$/;"	f	struct:todo.Todo
Print	pkg/pprint/pprint.go	/^func Print(s string, colors ...color.Attribute) {$/;"	f	package:pprint
PrintList	pkg/todo/todo.go	/^func (t *Todo) PrintList() {$/;"	f	struct:todo.Todo
Priority	pkg/todo/todo.go	/^	Priority    string$/;"	m	struct:todo.Task	typeref:typename:string
RemTask	pkg/todo/todo.go	/^func (t *Todo) RemTask(taskId int) {$/;"	f	struct:todo.Todo
ShowProgress	pkg/todo/todo.go	/^	ShowProgress bool$/;"	m	struct:todo.Todo	typeref:typename:bool
Size	pkg/file/file.go	/^func Size(filePath string) int64 {$/;"	f	package:file	typeref:typename:int64
Success	pkg/pprint/pprint.go	/^func Success(msg string) {$/;"	f	package:pprint
Task	pkg/todo/todo.go	/^type Task struct {$/;"	s	package:todo
Tasks	pkg/todo/todo.go	/^	Tasks        []Task$/;"	m	struct:todo.Todo	typeref:typename:[]Task
Todo	pkg/todo/todo.go	/^type Todo struct {$/;"	s	package:todo
ToggleTask	pkg/todo/todo.go	/^func (t Todo) ToggleTask(taskId int) {$/;"	f	struct:todo.Todo
Write	pkg/file/file.go	/^func Write(filePath string, content string, flag int) {$/;"	f	package:file
doneCount	pkg/todo/todo.go	/^	doneCount    float64$/;"	m	struct:todo.Todo	typeref:typename:float64
file	pkg/file/file.go	/^package file$/;"	p
filePath	pkg/todo/todo.go	/^	filePath     string$/;"	m	struct:todo.Todo	typeref:typename:string
loadTasks	pkg/todo/todo.go	/^func (t *Todo) loadTasks() {$/;"	f	struct:todo.Todo
main	main/todo/main.go	/^func main() {$/;"	f	package:main
main	main/todo/main.go	/^package main$/;"	p
normalizePriority	pkg/todo/todo.go	/^func normalizePriority(priority string) string {$/;"	f	package:todo	typeref:typename:string
parseTask	pkg/todo/todo.go	/^func parseTask(line string) Task {$/;"	f	package:todo	typeref:typename:Task
parseTaskDetails	pkg/todo/todo.go	/^func parseTaskDetails(line string) (description, priority, dueDate string, err error) {$/;"	f	package:todo	typeref:typename:(description, priority, dueDate string, err error)
pprint	pkg/pprint/pprint.go	/^package pprint$/;"	p
printProgress	pkg/todo/todo.go	/^func (t Todo) printProgress() {$/;"	f	struct:todo.Todo
saveToFile	pkg/todo/todo.go	/^func (t *Todo) saveToFile() {$/;"	f	struct:todo.Todo
todo	pkg/todo/todo.go	/^package todo$/;"	p
undoneCount	pkg/todo/todo.go	/^	undoneCount  float64$/;"	m	struct:todo.Todo	typeref:typename:float64
